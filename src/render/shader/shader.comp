#version 450

layout (local_size_x = 32, local_size_y = 32) in;

layout (binding = 10) uniform writeonly image2D render_texture;

//
// constants
//
const uint node_type_empty = 1;
const uint node_unused_flag = 1 << 8;
const uint node_pending_data_flag = 1 << 9;

const uvec2 num_work_groups = uvec2(8);
const float sqrt3 = 1.73205080757;
const uint max_depth = 16;

// these ones could be push constants hypothetically
const float f = 1.0;
const int max_steps = 128;
const float epsilon = 1.0 / 256.0;

//
// types 
//
struct request_t {
    vec3 x;
    uint child;

    uint depth;
    uint unused2;
    uint objectID;
    uint unused3;
};

struct octree_data_t {
    uint header;
    uint geometry;
    uint colour;
    uint child;
};

struct octree_node_t {
    vec3 x;
    uint header;
    octree_data_t children[8];
};
octree_node_t null_node;

struct ray_t {
    vec3 x;
    vec3 d;
};

struct intersection_t {
    bool hit;
    vec3 x;
    vec3 n;
    octree_node_t node;
    octree_data_t data;
};
intersection_t null_intersection = intersection_t(
    false, vec3(0), vec3(0), 
    null_node, octree_data_t(0, 0, 0, 0)
);

//
// push constants
//
layout( push_constant ) uniform push_constants {
    uvec2 window_size;
    float render_distance;
    uint current_frame;

    vec3 camera_position;
    float dummy2;        

    vec3 camera_right;
    float dummy3;

    vec3 camera_up;
    float dummy4;
} push_const;

//
// buffers
//
layout(binding = 1) buffer octree_buffer {
    octree_node_t body[][num_work_groups.x][num_work_groups.y];
} octree;

layout(binding = 2) buffer request_buffer {
    request_t requests[num_work_groups.x][num_work_groups.y];
} requests;

//
// shared memory
//
shared uint vacant_node_index;

uint expected_depth(vec3 x){
    // TODO: remove magic numbers from here, also check for efficiency
    vec3 xc = x - push_const.camera_position;
    return 16 - uint(max(0, 7 + 0.5 * log2(dot(xc, xc))));
}

// TODO: i think x can actually just be removed as a parameter from this function
void observe(vec3 x, uint parent_node, uint octant_index){
    // mark node as seen for expiration culling
    octree.body[parent_node][gl_WorkGroupID.x][gl_WorkGroupID.y].header = 
        ((push_const.current_frame - 1) << 24) | 
        (octree.body[parent_node][gl_WorkGroupID.x][gl_WorkGroupID.y].header & 0xFFFFFF);

    uint depth = octree.body[parent_node][gl_WorkGroupID.x][gl_WorkGroupID.y].header & 0xFF;

    // for vacant_node_index
    memoryBarrierShared();

    bool should_request = 
        requests.requests[gl_WorkGroupID.x][gl_WorkGroupID.y].child == 0 &&
        depth < expected_depth(x) &&
        (octree.body[parent_node][gl_WorkGroupID.x][gl_WorkGroupID.y].children[octant_index].header & 0xFF) != node_type_empty;

    uint child = atomicAnd(vacant_node_index, mix(~0, 0, should_request)); 

    if (child != 0 && should_request){
        octree.body[child][gl_WorkGroupID.x][gl_WorkGroupID.y].header |= node_pending_data_flag;
        octree.body[parent_node][gl_WorkGroupID.x][gl_WorkGroupID.y].children[octant_index].child = child;

        vec3 octant = vec3(octant_index & 1, (octant_index & 2) >> 1, (octant_index & 4) >> 2); 
        requests.requests[gl_WorkGroupID.x][gl_WorkGroupID.y].x = 
            octree.body[parent_node][gl_WorkGroupID.x][gl_WorkGroupID.y].x + octant * push_const.render_distance / (1 << depth);
        requests.requests[gl_WorkGroupID.x][gl_WorkGroupID.y].depth = depth + 1;
        requests.requests[gl_WorkGroupID.x][gl_WorkGroupID.y].child = child;
    }
}

octree_node_t octree_lookup(vec3 x, out bool is_valid_node){
    vec3 a = abs(x);
    is_valid_node = true;
    
    if (max(a.x, max(a.y, a.z)) > push_const.render_distance) { 
        is_valid_node = false;
        return null_node;
    }

    octree_node_t node = octree.body[0][gl_WorkGroupID.x][gl_WorkGroupID.y];

    uint parent_node = 0;
    uint octant_index = uint(x.x > 0) + (uint(x.y > 0) << 1) + (uint(x.z > 0) << 2);

    while (octree.body[parent_node][gl_WorkGroupID.x][gl_WorkGroupID.y].children[octant_index].child != 0){
        uint child = octree.body[parent_node][gl_WorkGroupID.x][gl_WorkGroupID.y].children[octant_index].child;
        if ((octree.body[child][gl_WorkGroupID.x][gl_WorkGroupID.y].header & node_pending_data_flag) != 0){
            break;
        }   

        parent_node = child;
        node = octree.body[parent_node][gl_WorkGroupID.x][gl_WorkGroupID.y];

        float node_size = 2 * push_const.render_distance / (1 << (node.header & 0xFF));
        bvec3 octant = greaterThan(x, node.x + node_size / 2);
        octant_index = uint(octant.x) | (uint(octant.y) << 1) | (uint(octant.z) << 2);
    }

    observe(x, parent_node, octant_index);

    return node;
}

vec4 unpack_vec4(uint x){
    return vec4(
        x & 0xFF, (x >> 8) & 0xFF, (x >> 16) & 0xFF, x >> 24
    ) / 255.0;
}

vec4 bilinear_interpolate(vec4 x00, vec4 x01, vec4 x10, vec4 x11, vec2 alpha){
    vec4 x = mix(x00, x10, alpha.x);
    vec4 y = mix(x01, x11, alpha.x);

    return mix(y, x, alpha.y);
}

vec4 trilinear_interpolate(vec4 x000, vec4 x001, vec4 x010, vec4 x011, vec4 x100, vec4 x101, vec4 x110, vec4 x111, vec3 alpha){
    vec4 x00 = mix(x000, x100, alpha.x);
    vec4 x01 = mix(x001, x101, alpha.x);
    vec4 x10 = mix(x010, x110, alpha.x);
    vec4 x11 = mix(x011, x111, alpha.x);

    return bilinear_interpolate(x00, x01, x10, x11, alpha.yz);
}

vec4 colour(vec3 x, octree_node_t node){
    float node_size = 2 * push_const.render_distance / (1 << (node.header & 0xFF));
    vec3 alpha = (x - node.x) / node_size;

    vec4 cs[8];
    for (uint i = 0; i < 8; i++){
        cs[i] = unpack_vec4(node.children[i].colour);
    }

    return trilinear_interpolate(
        cs[0], cs[1], cs[2], cs[3], cs[4], cs[5], cs[6], cs[7], alpha
    );
}

vec3 normal(uint n){
    return vec3(
        n & 0xFF, (n >> 8) & 0xFF, (n >> 16) & 0xFF
    ) / 127.5 - 1;
}

intersection_t plane_intersection(ray_t r, octree_node_t node){
    float node_size = 2 * push_const.render_distance / (1 << (node.header & 0xFF));

    bvec3 octant = greaterThan(r.x, node.x + node_size / 2);
    uint octant_index = uint(octant.x) | (uint(octant.y) << 1) | (uint(octant.z) << 2);

    if ((node.children[octant_index].header & 0xFF) == node_type_empty){
        return null_intersection;
    }

    octree_data_t data = node.children[octant_index];

    vec3 n = normal(data.geometry);

    float phi = float(data.geometry >> 24) / 255.0 - 0.5;
    phi *= sqrt3 * node_size / 2;

    vec3 c = node.x + vec3(octant) * node_size / 2 + node_size / 4;
    float d = dot(c, n) - phi;

    float xn = dot(r.x, n);

    if (xn < d){
        return intersection_t(true, r.x, n, node, data);
    }

    float dn = dot(r.d, n);
    float lambda = (d - xn) / (dn + float(dn == 0) * epsilon);

    return intersection_t(lambda >= 0, r.x + lambda * r.d, n, node, data);
}

intersection_t raycast(ray_t r){
    octree_node_t node;

    intersection_t intersection = null_intersection;
    for (int i = 0; i < max_steps; i++){
        bool is_valid_node;
	    node = octree_lookup(r.x, is_valid_node);
        float node_size = 2 * push_const.render_distance / (1 << (node.header & 0xFF));

        if (!is_valid_node){
            break;
        }

        bvec3 octant = greaterThan(r.x, node.x + node_size / 2);
        vec3 m = node.x + vec3(octant) * node_size / 2;

        intersection = plane_intersection(r, node);
        if (
            intersection.hit &&
            intersection.x.x >= m.x && intersection.x.x <= m.x + node_size / 2 && 
            intersection.x.y >= m.y && intersection.x.y <= m.y + node_size / 2 && 
            intersection.x.z >= m.z && intersection.x.z <= m.z + node_size / 2    
        ){
            break;
        }
	
        vec3 lambda_i = abs(
            m + sign(max(r.d, 0)) * node_size / 2 - r.x
        ) / max(abs(r.d), epsilon);

        float lambda = min(lambda_i.x, min(lambda_i.y, lambda_i.z)) + epsilon;
        r.x += r.d * lambda;
    }

    return intersection;
}

float shadow(vec3 l, vec3 p){
    intersection_t i = raycast(ray_t(l, normalize(p - l)));
    return float(length(i.x - p) < epsilon * 2);
}

vec4 phong_light(vec3 light_p, vec3 x, octree_data_t data){
    //TODO: 1) blinn-phong lighting
    //      2) more complex lighting
    vec4 colour = vec4(50);
    float kd = 0.5;
    float ks = 0.76;
    float shininess = 32;

    // attenuation
    float dist = length(light_p - x);
    float attenuation = 1.0 / (dist * dist);

    //ambient 
    vec4 a = vec4(0.5, 0.5, 0.5, 1.0);

    //shadows
    float shadow = shadow(light_p, x);

    //diffuse
    vec3 l = normalize(light_p - x);
    vec3 n = normal(data.geometry);

    vec4 d = kd * dot(l, n) * colour;

    //specular
    vec3 v = x - push_const.camera_position;
    vec3 right = push_const.camera_right;
    vec3 u = push_const.camera_up;

    // TODO: not sure about order of cross product here??
    v = vec3(dot(v, right), dot(v, u), dot(v, cross(u, right))); 
    v = normalize(v);

    vec3 r = reflect(l, n);
    vec4 s = ks * pow(max(dot(r, v), epsilon), shininess) * colour;
    return a + (d + s) * attenuation * shadow;
}

vec4 light(vec3 p, vec3 x, octree_data_t data){
    vec3 l = normalize(p - x);
    return phong_light(p, x, data);
}

vec4 sky(){
    return vec4(0.5, 0.7, 0.9, 1.0);
}

void render(){
    vec2 uv = vec2(gl_GlobalInvocationID.xy) / vec2(gl_NumWorkGroups.xy * gl_WorkGroupSize.xy);
    uv = uv * 2.0 - 1.0;
    uv.y *= -1;
    
    vec3 up = push_const.camera_up;
    vec3 right = push_const.camera_right;
    vec3 x0 = push_const.camera_position;

    vec3 forward = cross(right, up);

    vec3 d = normalize(forward * f + right * uv.x + up * uv.y);
    
    vec4 out_colour = sky();

    ray_t r = ray_t(x0, d);
    intersection_t i = raycast(r);

    if (i.hit){
        out_colour = colour(i.x, i.node) * light(vec3(-3, 3, -3), i.x, i.data);
    }
    imageStore(render_texture, ivec2(gl_GlobalInvocationID.xy), out_colour);
}

bool should_cull_node(octree_node_t node, uint octant){
    uint depth = node.header & 0xFF;
    bool size_cull = depth > expected_depth(node.x + push_const.render_distance / (1 << depth));

    octree_node_t child_node = octree.body[node.children[octant].child][gl_WorkGroupID.x][gl_WorkGroupID.y];
    bool expiry_cull = (child_node.header >> 24) == (push_const.current_frame & 0xFF);

    for (uint i = 0; i < 8; i++){
        if (child_node.children[i].child != 0){
            return false;
        }
    }

    return 
        node.children[octant].child != 0 &&
        (node.header & node_unused_flag) == 0 &&
        (node.header & node_pending_data_flag) == 0 &&
        (size_cull || expiry_cull);
}

void octree_update(){
    if (gl_LocalInvocationID.xy == uvec2(0)){
        vacant_node_index = 0;
    }
    memoryBarrierShared();

    uint i = gl_LocalInvocationID.x + gl_LocalInvocationID.y * gl_WorkGroupSize.x;

    // submit free nodes to request queue
    if ((octree.body[i][gl_WorkGroupID.x][gl_WorkGroupID.y].header & node_unused_flag) != 0){
        vacant_node_index = i;
    }

    // cull extraneous nodes
    for (uint octant = 0; octant < 8; octant++){
        octree_node_t node = octree.body[i][gl_WorkGroupID.x][gl_WorkGroupID.y];

        if (should_cull_node(node, octant)){
            uint child = node.children[octant].child;
            octree.body[i][gl_WorkGroupID.x][gl_WorkGroupID.y].children[octant].child = 0;
            octree.body[child][gl_WorkGroupID.x][gl_WorkGroupID.y].header |= node_unused_flag;
            
            // reset expiration culling counter
            octree.body[i][gl_WorkGroupID.x][gl_WorkGroupID.y].header = 
                ((push_const.current_frame - 1) << 24) | (node.header & 0xFFFFFF);
        }
    }  
}

void main(){
    octree_update();
    render();
}