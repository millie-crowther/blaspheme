#version 450

layout (local_size_x = 32, local_size_y = 32) in;

layout (binding = 10) uniform writeonly image2D render_texture;

// constants
const uint node_empty_flag = 1 << 24;
const uint node_unused_flag = 1 << 25;
const uint node_child_mask = 0xFFFF;

const uvec2 work_group_count = uvec2(12);
const float sqrt3 = 1.73205080757;
const uint max_depth = 16;

// these ones could be push constants hypothetically
const float f = 1.0;
const int max_steps = 64;
const float epsilon = 1.0 / 256.0;

// types 
struct ray_t {
    vec3 x;
    vec3 d;
};

struct intersection_t {
    bool hit;
    vec3 x;
    uvec2 node;
};

// push constants
layout( push_constant ) uniform push_constants {
    uvec2 window_size;
    float render_distance;
    uint current_frame;

    vec3 camera_position;
    float dummy2;        

    vec3 camera_right;
    float dummy3;

    vec3 camera_up;
    float dummy4;
} pc;

// input buffers
struct substance_t {
    vec3 c;
    int root;

    vec3 r;  
    uint id;
};

layout (binding = 1) buffer input_buffer { 
    substance_t substances[1024];
    uvec2 octree[]; 
} input_data;

// output buffers
struct request_t {
    vec3 c;
    uint depth;

    uint child;
    uint unused2;
    uint substanceID;
    uint unused3;
};

layout (binding = 2) buffer request_buffer { request_t requests[]; } requests;

// work group data that is persistent between frames
struct persistent_t {
    vec3 v_min;
    float _1;

    vec3 v_max;
    float _2;
};

layout (binding = 3) buffer persistent_buffer { persistent_t data[]; } persistent;

// shared memory
shared ivec3 visibility_min;
shared ivec3 visibility_max;
shared uint vacant_node_index;

shared uint substance_bins[gl_WorkGroupSize.x * gl_WorkGroupSize.y];
shared substance_t substances[gl_WorkGroupSize.x * gl_WorkGroupSize.y];
shared uvec2 octree[gl_WorkGroupSize.x * gl_WorkGroupSize.y];
shared bool hitmap[gl_WorkGroupSize.x * gl_WorkGroupSize.y / 8];

uint expected_depth(vec3 x){
    vec3 xc = x - pc.camera_position;
    return max(1, 17 - uint(max(0, 7 + 0.5 * log2(dot(xc, xc)))));
}

float expected_size(vec3 x){
    return pc.render_distance / (1 << expected_depth(x)) / 4;
}

uint work_group_offset(){
    return (gl_WorkGroupID.x + gl_WorkGroupID.y * work_group_count.x) * gl_WorkGroupSize.x * gl_WorkGroupSize.y;
}

void request_data(uint i, uint substanceID, vec3 c, uint depth){
    uint request_id = gl_WorkGroupID.x + gl_WorkGroupID.y * work_group_count.x;
    uint child_local = atomicAnd(vacant_node_index, 0); 

    if (child_local != 0){
        input_data.octree[i + work_group_offset()].x = child_local;

        requests.requests[request_id].substanceID = substanceID;
        requests.requests[request_id].c = c;
        requests.requests[request_id].depth = depth;
        requests.requests[request_id].child = child_local + work_group_offset();
    }
}

vec4 colour(vec3 x){
    return vec4(0.8, 0.4, 0.6, 1.0);
}

vec3 normal(uint n){
    return vec3(
        n & 0xFF, (n >> 8) & 0xFF, (n >> 16) & 0xFF
    ) / 127.5 - 1;
}

uint get_bin(vec3 x){
    return 0;
}

float phi_s(ray_t r, out bool hit, substance_t substance, out uvec2 node, uint expected_depth){
    // lookup octree node
    vec3 c = substance.c;
    vec3 s = vec3(pc.render_distance);

    uint i;
    uint depth = 0;
    uint next = substance.root;

    for (; depth <= expected_depth && (depth == 0 || next != 0) && (octree[next].x & node_unused_flag) == 0; depth++){
        i = next | uint(dot(step(c, r.x), vec3(1, 2, 4)));
        s /= 2;
        c += sign(r.x - c) * s;
        hitmap[i / 8] = true;
        next = octree[i].x & node_child_mask;
    }

    node = octree[i];

    if (depth <= expected_depth && (node.x & node_empty_flag) == 0){
        request_data(i, substance.id, c, depth);
    }

    // calculate distance to intersect plane
    vec3 n = normal(node.y);
    float plane = min(0,
        dot(c - r.x, n) - 
        (float(node.y) / 2139095040 - 1) * length(s)
    ) / dot(r.d, n);

    // calculate distance to edge of bounding cube
    vec3 cube_i = (c + sign(r.d) * s - r.x) / r.d;
    float cube = min(cube_i.x, min(cube_i.y, cube_i.z)) + epsilon;

    // advance ray appropriately
    hit = (node.x & node_empty_flag) == 0 && plane >= 0 && plane < cube;
    
    return mix(cube, plane, hit);
}

intersection_t raycast(ray_t r, inout vec3 v_min, inout vec3 v_max){
    bool hit = false;
    uvec2 hit_node;

    uint steps = 0;
    for (; !hit && steps < max_steps; steps++){
        uint bin = get_bin(r.x);
        uint num_substances = substance_bins[bin] & 0xFFFFFFFF;
        uint substance_index = substance_bins[bin] >> 16;

        uint expected_depth = expected_depth(r.x);
        float phi = mix(pc.render_distance, expected_size(r.x) + epsilon, num_substances == 0);
        for (uint substanceID = substance_index; !hit && substanceID < substance_index + num_substances; substanceID++){
            substance_t s = substances[substanceID];
            phi = min(phi, phi_s(r, hit, s, hit_node, expected_depth));
        }
        r.x += r.d * phi;
    }

    return intersection_t(hit && steps < max_steps, r.x, hit_node);
}

float shadow(vec3 l, vec3 p, inout vec3 v_min, inout vec3 v_max){
    // return 1.0;
    intersection_t i = raycast(ray_t(l, normalize(p - l)), v_min, v_max);
    return float(length(i.x - p) < epsilon * 2);
}

vec4 light(vec3 light_p, vec3 x, uvec2 node, inout vec3 v_min, inout vec3 v_max){
    vec4 colour = vec4(50);
    float kd = 0.5;
    float ks = 0.76;
    float shininess = 32;

    // attenuation
    float dist = length(light_p - x);
    float attenuation = 1.0 / (dist * dist);

    //ambient 
    vec4 a = vec4(0.5, 0.5, 0.5, 1.0);

    //shadows
    float shadow = shadow(light_p, x, v_min, v_max);

    //diffuse
    vec3 l = normalize(light_p - x);
    vec3 n = normal(node.y);

    vec4 d = kd * dot(l, n) * colour;

    //specular
    vec3 v = x - pc.camera_position;
    vec3 right = pc.camera_right;
    vec3 u = pc.camera_up;

    // TODO: not sure about order of cross product here??
    v = vec3(dot(v, right), dot(v, u), dot(v, cross(u, right))); 
    v = normalize(v);

    vec3 r = reflect(l, n);
    vec4 s = ks * pow(max(dot(r, v), epsilon), shininess) * colour;
    return a + (d + s) * attenuation * shadow;
}

vec4 sky(){
    return vec4(0.5, 0.7, 0.9, 1.0);
}

void render(){
    vec2 uv = vec2(gl_GlobalInvocationID.xy) / vec2(gl_NumWorkGroups.xy * gl_WorkGroupSize.xy);
    uv = uv * 2.0 - 1.0;
    uv.y *= -1;
    
    vec3 up = pc.camera_up;
    vec3 right = pc.camera_right;
    vec3 x0 = pc.camera_position;

    vec3 forward = cross(right, up);

    // create ray direction vector. remove zero components for efficiency later on
    vec3 d = normalize(forward * f + right * uv.x + up * uv.y);
    d += vec3(equal(d, vec3(0))) * epsilon;
    
    vec4 out_colour = sky();

    vec3 v_min = pc.camera_position;
    vec3 v_max = v_min;

    ray_t r = ray_t(x0, d);
    intersection_t i = raycast(r, v_min, v_max);

    // set visibility bounds 
    // atomicMin(visibility_min.x, floatBitsToInt(v_min.x));
    // atomicMin(visibility_min.y, floatBitsToInt(v_min.y));
    // atomicMin(visibility_min.z, floatBitsToInt(v_min.z));

    // atomicMax(visibility_max.x, floatBitsToInt(v_max.x));
    // atomicMax(visibility_max.y, floatBitsToInt(v_max.y));
    // atomicMax(visibility_max.z, floatBitsToInt(v_max.z));

    if (i.hit){
        out_colour = colour(i.x) * light(vec3(-3, 3, -3), i.x, i.node, v_min, v_max);
    }
    imageStore(render_texture, ivec2(gl_GlobalInvocationID.xy), out_colour);
}

void prerender(uint i){
    // clear shared variables
    vacant_node_index = 0;
    hitmap[i / 8] = false;
    // visibility_min = floatBitsToInt(pc.camera_position);
    // visibility_max = visibility_min;
    substance_bins[i] = 0;

    // load octree from global memory into shared memory
    octree[i] = input_data.octree[i + work_group_offset()];

    // submit free nodes to request queue
    if (i % 8 == 0 && (octree[i].x & node_unused_flag) != 0){
        vacant_node_index = i;
    }

    // load substances into shared memory
    substances[i] = input_data.substances[i];

    substance_bins[0] = 2;
}

void postrender(uint i){
    // cull nodes that havent been seen this frame
    uint c = (octree[i].x & node_child_mask);
    if (!hitmap[c / 8]){
        input_data.octree[i + work_group_offset()].x &= ~node_child_mask;
        input_data.octree[c + work_group_offset()].x |= node_unused_flag;
    }

    // update visiblity aabb
    // if (gl_LocalInvocationID.x == 0 && gl_LocalInvocationID.y == 0){
    //     persistent.data[i].v_min = intBitsToFloat(visibility_min);
    //     persistent.data[i].v_max = intBitsToFloat(visibility_max);
    // }
}

void main(){
    uint i = gl_LocalInvocationID.x + gl_LocalInvocationID.y * gl_WorkGroupSize.x;

    prerender(i);

    barrier();
    render();
    barrier();

    postrender(i);
}
