#version 450

layout (local_size_x = 32, local_size_y = 32) in;

layout (binding = 10) uniform writeonly image2D render_texture;

// constants
const uint node_empty_flag = 1 << 0;
const uint node_unused_flag = 1 << 1;

const uvec2 work_group_count = uvec2(8);
const float sqrt3 = 1.73205080757;
const uint max_depth = 16;

// these ones could be push constants hypothetically
const float f = 1.0;
const int max_steps = 64;
const float epsilon = 1.0 / 256.0;

// types 
struct request_t {
    vec3 x;
    uint child;

    uint depth;
    uint unused2;
    uint objectID;
    uint unused3;
};

struct octree_node_t {
    uint header;
    uint geometry;
    uint colour;
    uint child;
};

struct ray_t {
    vec3 x;
    vec3 d;
};

struct intersection_t {
    bool hit;
    vec3 x;
    octree_node_t node;
};

// push constants
layout( push_constant ) uniform push_constants {
    uvec2 window_size;
    float render_distance;
    uint current_frame;

    vec3 camera_position;
    float dummy2;        

    vec3 camera_right;
    float dummy3;

    vec3 camera_up;
    float dummy4;
} push_const;

// buffers
layout(binding = 1) buffer octree_buffer {
    octree_node_t body[];
} octree_global;

layout(binding = 2) buffer request_buffer {
    request_t requests[];
} requests;

// shared memory
shared uint vacant_node_index;
shared octree_node_t octree[gl_WorkGroupSize.x * gl_WorkGroupSize.y];
shared bool hitmap[gl_WorkGroupSize.x * gl_WorkGroupSize.y / 8];

uint expected_depth(vec3 x){
    vec3 xc = x - push_const.camera_position;
    return 17 - uint(max(0, 7 + 0.5 * log2(dot(xc, xc))));
}

uint work_group_offset(){
    return (gl_WorkGroupID.x + gl_WorkGroupID.y * work_group_count.x) * gl_WorkGroupSize.x * gl_WorkGroupSize.y;
}

void observe(vec3 x, uint i, uint depth, vec3 m){
    uint request_id = gl_WorkGroupID.x + gl_WorkGroupID.y * work_group_count.x;
    bool should_request = 
        octree[i].child == 0 && 
        requests.requests[request_id].child == 0 &&
        depth <= expected_depth(x) &&
        (octree[i].header & node_empty_flag) == 0;

    uint child_local = atomicAnd(vacant_node_index, mix(~0, 0, should_request)); 

    if (child_local != 0 && should_request){
        octree[i].child = child_local;
        octree_global.body[i + work_group_offset()].child = child_local;

        requests.requests[request_id].x = m;
        requests.requests[request_id].depth = depth;
        requests.requests[request_id].child = child_local + work_group_offset();
    }
}

octree_node_t octree_lookup(vec3 x, out vec4 aabb){
    aabb = vec4(vec3(-push_const.render_distance), 2 * push_const.render_distance);
    uint depth = 0;
    uint i = 0;
    octree_node_t node = { 0, 0, 0, 1 };
    
    for (; node.child != 0; depth++){
        // find octant
        uvec3 o = uvec3(greaterThan(x, aabb.xyz + aabb.w / 2));
        i = node.child | o.x | (o.y << 1) | (o.z << 2);

        // check that child data is present, possible that:
        // 1) CPU hasn't yet streamed in requested data
        // 2) child has already been culled for being too high resolution 
        octree_node_t next_node = octree[i];
        if ((next_node.header & node_unused_flag) != 0){
            break;
        }   
        node = next_node;

        // refine bounding box
        aabb.w /= 2;
        aabb.xyz += o * aabb.w;

        // mark hitmap
        hitmap[i / 8] = true;
    }

    aabb.xyz += vec3(greaterThan(x, aabb.xyz + aabb.w)) * aabb.w;

    observe(x, i, depth, aabb.xyz);

    return node;
}

vec4 colour(uint x){
    return vec4(
        x & 0xFF, (x >> 8) & 0xFF, (x >> 16) & 0xFF, x >> 24
    ) / 255.0;
}

vec3 normal(uint n){
    return vec3(
        n & 0xFF, (n >> 8) & 0xFF, (n >> 16) & 0xFF
    ) / 127.5 - 1;
}

intersection_t advance_ray(inout ray_t r){
    vec4 aabb;
    octree_node_t node = octree_lookup(r.x, aabb);

    vec3 lambda_i = (aabb.xyz + sign(max(r.d, 0)) * aabb.w - r.x) / r.d;
    float lambda_aabb = min(lambda_i.x, min(lambda_i.y, lambda_i.z));

    vec3 n = normal(node.geometry);
    float phi = (float(node.geometry >> 24) / 255.0 - 0.5) * sqrt3 * aabb.w;
    float lambda_plane = min(dot(aabb.xyz + aabb.w / 2, n) - phi - dot(r.x, n), 0) / dot(r.d, n);

    bool hit = 
        (node.header & node_empty_flag) == 0 &&
        lambda_plane >= 0 &&
        lambda_plane < lambda_aabb;

    float lambda = mix(lambda_aabb, lambda_plane, hit) + epsilon;

    r.x += r.d * lambda;
    return intersection_t(hit, r.x, node);
}

intersection_t raycast(ray_t r){
    intersection_t intersection = intersection_t(false, vec3(0), octree_node_t(0, 0, 0, 0));

    for (int i = 0; !intersection.hit && i < max_steps; i++){
        intersection = advance_ray(r);
    }

    return intersection;
}

float shadow(vec3 l, vec3 p){
    intersection_t i = raycast(ray_t(l, normalize(p - l)));
    return float(length(i.x - p) < epsilon * 2);
}

vec4 light(vec3 light_p, vec3 x, octree_node_t node){
    vec4 colour = vec4(50);
    float kd = 0.5;
    float ks = 0.76;
    float shininess = 32;

    // attenuation
    float dist = length(light_p - x);
    float attenuation = 1.0 / (dist * dist);

    //ambient 
    vec4 a = vec4(0.5, 0.5, 0.5, 1.0);

    //shadows
    float shadow = shadow(light_p, x);

    //diffuse
    vec3 l = normalize(light_p - x);
    vec3 n = normal(node.geometry);

    vec4 d = kd * dot(l, n) * colour;

    //specular
    vec3 v = x - push_const.camera_position;
    vec3 right = push_const.camera_right;
    vec3 u = push_const.camera_up;

    // TODO: not sure about order of cross product here??
    v = vec3(dot(v, right), dot(v, u), dot(v, cross(u, right))); 
    v = normalize(v);

    vec3 r = reflect(l, n);
    vec4 s = ks * pow(max(dot(r, v), epsilon), shininess) * colour;
    return a + (d + s) * attenuation * shadow;
}

vec4 sky(){
    return vec4(0.5, 0.7, 0.9, 1.0);
}

void render(){
    vec2 uv = vec2(gl_GlobalInvocationID.xy) / vec2(gl_NumWorkGroups.xy * gl_WorkGroupSize.xy);
    uv = uv * 2.0 - 1.0;
    uv.y *= -1;
    
    vec3 up = push_const.camera_up;
    vec3 right = push_const.camera_right;
    vec3 x0 = push_const.camera_position;

    vec3 forward = cross(right, up);

    // create ray direction vector. remove zero components for efficiency later on
    vec3 d = normalize(forward * f + right * uv.x + up * uv.y);
    d += vec3(equal(d, vec3(0))) * epsilon;
    
    vec4 out_colour = sky();

    ray_t r = ray_t(x0, d);
    intersection_t i = raycast(r);

    if (i.hit){
        out_colour = colour(i.node.colour) * light(vec3(-3, 3, -3), i.x, i.node);
    }
    imageStore(render_texture, ivec2(gl_GlobalInvocationID.xy), out_colour);
}

void load_octree(){
    uint i = gl_LocalInvocationID.x + gl_LocalInvocationID.y * gl_WorkGroupSize.x;

    vacant_node_index = 0;

    // load octree from global memory into shared memory
    octree_node_t node = octree_global.body[i + work_group_offset()];
    octree[i] = node;

    // submit free nodes to request queue
    if (i % 8 == 0 && (node.header & node_unused_flag) != 0){
        vacant_node_index = i;
    }

    barrier();
}

void cull(){

}

void main(){
    load_octree();
    render();
    cull();
}
